From c2f967f767426b8c5aa532d8ba3a3d046852afb5 Mon Sep 17 00:00:00 2001
From: Ash Charles <ashcharles@gmail.com>
Date: Fri, 3 Jul 2015 13:40:33 -0700
Subject: [PATCH] Revert "Add IMU init and reset function"

This reverts commit 6011b764d6a4c8eb37a3c8eb43262e1bb713b27b as this
commit appears to introduce circular imports.
---
 IMU.py              | 13 +++++--------
 robovero/arduino.py | 54 ++++++++++++++++++++++++++---------------------------
 robovero/extras.py  | 32 ++++++++-----------------------
 3 files changed, 39 insertions(+), 60 deletions(-)

diff --git a/IMU.py b/IMU.py
index 1d3b37b..476040f 100644
--- a/IMU.py
+++ b/IMU.py
@@ -1,7 +1,7 @@
 """Example application that outputs accelerometer, compass and gyro readings.
 """
 
-from robovero.extras import Array, roboveroConfig, IMUInit
+from robovero.extras import Array, roboveroConfig
 from robovero.lpc17xx_i2c import I2C_M_SETUP_Type, I2C_MasterTransferData, \
                             I2C_TRANSFER_OPT_Type
 from robovero.lpc17xx_gpio import GPIO_ReadValue
@@ -63,11 +63,11 @@ class I2CDevice(object):
     self.tx_data[0] = register
     self.config.tx_length = 1
     self.config.rx_data = self.rx_data.ptr
-    self.config.rx_length = 1
+    self.config.rx_length = 1 
     ret = I2C_MasterTransferData(LPC_I2C0, self.config.ptr,
                                   I2C_TRANSFER_OPT_Type.I2C_TRANSFER_POLLING)
     if ret == Status.ERROR:
-      exit("I2C Read Error")
+      exit("I2C Read Error")    
     return self.rx_data[0]
 
   def read6Reg(self, register):
@@ -78,7 +78,7 @@ class I2CDevice(object):
     ret = I2C_MasterTransferData(LPC_I2C0, self.config.ptr,
                                   I2C_TRANSFER_OPT_Type.I2C_TRANSFER_POLLING)
     if ret == Status.ERROR:
-      exit("I2C Read Error")
+      exit("I2C Read Error")    
     return self.rx_data6
 
   def writeReg(self, register, value):
@@ -101,13 +101,10 @@ class I2CDevice(object):
 # Initialize pin select registers
 roboveroConfig()
 
-# Initialize IMU
-IMUInit()
-
 # configure accelerometer
 accelerometer = I2CDevice(0x18)
 accelerometer.writeReg(accel_ctrl_reg1, 0x27)
-accelerometer.writeReg(accel_ctrl_reg4, 0x00) #
+accelerometer.writeReg(accel_ctrl_reg4, 0x00) # 
 
 # configure compass
 compass = I2CDevice(0x1E)
diff --git a/robovero/arduino.py b/robovero/arduino.py
index b889761..f94150c 100644
--- a/robovero/arduino.py
+++ b/robovero/arduino.py
@@ -39,7 +39,6 @@ values =     {LOW:0, HIGH:1}
 P0_4 =      "P0_4"
 P0_5 =      "P0_5"
 P0_19 =      "P0_19"
-P1_0 =       "P1_0"
 P1_27 =      "P1_27"
 P3_25 =      "P3_25"
 P2_10 =      "P2_10"
@@ -64,7 +63,6 @@ digital_pins = {
   P0_4:DigitalPin(0,4),
   P0_5:DigitalPin(0,5),
   P0_19:DigitalPin(0,19),
-  P1_0:DigitalPin(1,0),
   P1_27:DigitalPin(1,27),
   P3_25:DigitalPin(3,25),
   P2_10:DigitalPin(2,10),
@@ -84,19 +82,19 @@ def pinMode(pin, mode):
   """Configures the specified pin to behave either as an input or an output.
   """
   global digital_pins, modes
-
+  
   if pin not in digital_pins:
     print "Pin must be one of:"
     for key in digital_pins:
       print key
     exit(1)
-
+    
   if mode not in modes:
     print "Mode must be one of:",
     for key in modes:
       print key,
     exit(1)
-
+  
   GPIO_SetDir(digital_pins[pin].portnum, (1 << digital_pins[pin].pinnum),
       modes[mode]);
 
@@ -105,20 +103,20 @@ def digitalWrite(pin, value):
   """Write a HIGH or a LOW value to a digital pin.
   """
   global digital_pins, values
-
+  
   if pin not in digital_pins:
     print "Pin must be one of:"
     for key in digital_pins:
       print key
     exit(1)
-
+  
   if value in values.keys():
     value = values[value]
   elif value not in values.values():
     print "Value must be one of:", values.items()
     exit(1)
-
-  if value:
+  
+  if value:  
     GPIO_SetValue(digital_pins[pin].portnum, (1 << digital_pins[pin].pinnum))
   else:
     GPIO_ClearValue(digital_pins[pin].portnum, (1 << digital_pins[pin].pinnum))
@@ -128,13 +126,13 @@ def digitalRead(pin):
   """Reads the value from a specified digital pin, either HIGH or LOW.
   """
   global digital_pins
-
+  
   if pin not in digital_pins:
     print "Pin must be one of:"
     for key in digital_pins:
       print key
     exit(1)
-
+  
   if (GPIO_ReadValue(digital_pins[pin].portnum) & (1 << digital_pins[pin].pinnum)):
     return 1
   else:
@@ -157,7 +155,7 @@ class AnalogPin(object):
   def __init__(self, channel, interrupt):
     self.channel = channel
     self.interrupt = interrupt
-
+    
 analog_pins = {
   AD0_0:AnalogPin(ADC_CHANNEL_SELECTION.ADC_CHANNEL_0, ADC_TYPE_INT_OPT.ADC_ADINTEN0),
   AD0_1:AnalogPin(ADC_CHANNEL_SELECTION.ADC_CHANNEL_1, ADC_TYPE_INT_OPT.ADC_ADINTEN1),
@@ -169,11 +167,11 @@ analog_pins = {
 }
 
 def analogRead(pin):
-  """Reads the value from the specified analog pin.
-
+  """Reads the value from the specified analog pin. 
+  
   Assumes that extras.roboveroConfig() has been called to initialize the ADC.
   """
-
+  
   if pin not in analog_pins:
     print "Pin must be one of:"
     for key in analog_pins:
@@ -185,18 +183,18 @@ def analogRead(pin):
   start_now = ADC_START_OPT.ADC_START_NOW
   adc_data_done = ADC_DATA_STATUS.ADC_DATA_DONE
   enable = FunctionalState.ENABLE
-
+  
   ADC_Init(LPC_ADC, 200000)
   ADC_ChannelCmd(LPC_ADC, analog_pin.channel,  enable)
   ADC_StartCmd(LPC_ADC, start_now)
   while not ADC_ChannelGetStatus(LPC_ADC, analog_pin.channel, adc_data_done):
     sleep(0)
-
+    
   adc_value = ADC_ChannelGetData(LPC_ADC, analog_pin.channel)
 
   return adc_value
 
-
+    
 PWM1 = "PWM1"
 PWM2 = "PWM2"
 PWM3 = "PWM3"
@@ -217,12 +215,12 @@ def analogWrite(pin, value):
   """Writes an analog value (PWM wave) to a pin.
   """
   global pwm_pins
-
+  
   if pin not in pwm_pins:
     print "Pin must be one of:"
     for key in pwm_pins:
       print key
-    exit(1)
+    exit(1)  
 
   if value < 0 or value > 255:
     print "Invalid duty cycle"
@@ -237,8 +235,8 @@ def analogWrite(pin, value):
   PWM_ChannelCmd(LPC_PWM1, pwm_pins[pin], FunctionalState.ENABLE)
   PWM_ResetCounter(LPC_PWM1)
   PWM_CounterCmd(LPC_PWM1, FunctionalState.ENABLE)
-  PWM_Cmd(LPC_PWM1, FunctionalState.ENABLE)
-
+  PWM_Cmd(LPC_PWM1, FunctionalState.ENABLE)  
+  
 
 ################################################################################
 # Advanced I/O
@@ -248,12 +246,12 @@ def tone(pin, frequency, duration=None):
   """Generates a square wave of the specified frequency on pin.
   """
   global pwm_pins
-
+  
   if pin not in pwm_pins:
     print "Pin must be one of:"
     for key in pwm_pins:
       print key
-    exit(1)
+    exit(1)  
 
   if frequency < 1 or frequency > 500000:
     print "Invalid frequency"
@@ -261,12 +259,12 @@ def tone(pin, frequency, duration=None):
 
   initMatch(0, 1000000/frequency)
   initMatch(pwm_pins[pin], 500000/frequency)
-
+  
   PWM_ChannelCmd(LPC_PWM1, pwm_pins[pin], FunctionalState.ENABLE)
   PWM_ResetCounter(LPC_PWM1)
   PWM_CounterCmd(LPC_PWM1, FunctionalState.ENABLE)
   PWM_Cmd(LPC_PWM1, FunctionalState.ENABLE)
-
+  
   if duration:
     t = threading.Timer(float(duration)/1000.0, noTone, [pin])
     t.start()
@@ -275,11 +273,11 @@ def noTone(pin):
   """Stops the generation of a square wave on pin.
   """
   global pwm_pins
-
+  
   if pin not in pwm_pins:
     print "Pin must be one of:"
     for key in pwm_pins:
       print key
     exit(1)
-
+    
   PWM_ChannelCmd(LPC_PWM1, pwm_pins[pin], FunctionalState.DISABLE)
diff --git a/robovero/extras.py b/robovero/extras.py
index 4dcc9f2..1978205 100644
--- a/robovero/extras.py
+++ b/robovero/extras.py
@@ -16,17 +16,17 @@ class Array(object):
     self.length = length
     self.size = size
     self.ptr = malloc(size * length)
-
+    
     # assign the same value to all items
     if type(values) == int:
       for i in range(length):
         self[i] = values
-
+    
     # copy a list of values
     elif type(values) == list:
       for i in range(min(length, len(values))):
         self[i] = values[i]
-
+        
     # convert a string to a list of characters and copy
     elif type(values) == str:
       values = list(values)
@@ -44,7 +44,7 @@ class Array(object):
     if type(value) != int:
       raise TypeError
     robocaller("deref", "void", self.ptr + self.size*key, self.size, value)
-
+    
   def __del__(self):
     free(self.ptr)
 
@@ -53,12 +53,12 @@ def roboveroConfig():
   on the RoboVero board.
   """
   return robocaller("roboveroConfig", "void")
-
+  
 def heartbeatOn():
   """Flash the onboard LED.
   """
   return robocaller("heartbeatOn", "void")
-
+  
 def heartbeatOff():
   """Let user control the onboard LED.
   """
@@ -68,26 +68,10 @@ def initMatch(ch, count):
   """Initialize a PWM match condition.
   """
   return robocaller("initMatch", "void", ch, count)
-
+  
 def registerCallback(IRQn, function):
   """Register a RoboVero interrupt service routine.
-
+  
   Pass the IRQ number and function to call when an interrupt occurs.
   """
   isr_list[IRQn] = function
-
-from robovero.arduino import pinMode, digitalWrite, P1_0, OUTPUT
-def IMUInit():
-  """ Enable IMU by pulling IMU_EN low
-  """
-  pinMode(P1_0, OUTPUT)
-  digitalWrite(P1_0, 0)
-
-def IMUReset():
-  """ Reset IMU by pulling IMU_EN high and then low
-  """
-  pinMode(P1_0, OUTPUT)
-  digitalWrite(P1_0, 1)
-  digitalWrite(P1_0, 0)
-
-
-- 
2.1.4

